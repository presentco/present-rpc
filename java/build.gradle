buildscript {
    repositories {
        jcenter()
    }

    ext.versions = [
            'okhttp': '3.9.1',
            'slf4j': '1.7.25',
            'wire': '2.2.0',
            'maven': '3.5.0',
            'mavenAnnotations': '3.5',
            'mavenPluginBuilder': '1.2.1',
            'mavenPublish': '0.6.0'
    ]

    ext.deps = [
            'okhttp': "com.squareup.okhttp3:okhttp:${versions.okhttp}",
            'slf4j': [
                    'api': "org.slf4j:slf4j-api:${versions.slf4j}",
                    'jdk14': "org.slf4j:slf4j-jdk14:${versions.slf4j}",
            ],
            'guava': "com.google.guava:guava:27.0.1-jre",
            'gson': "com.google.code.gson:gson:2.8.5",
            'javapoet': "com.squareup:javapoet:1.3.0",
            'servlet': "javax.servlet:javax.servlet-api:3.1.0",
            'wire': [
                    'compiler': "com.squareup.wire:wire-compiler:${versions.wire}",
                    'gson': "com.squareup.wire:wire-gson-support:${versions.wire}",
                    'runtime': "com.squareup.wire:wire-runtime:${versions.wire}",
                    'schema': "com.squareup.wire:wire-schema:${versions.wire}",
            ],
            'junit': "junit:junit:4.12",
            'maven': [
                    'core': "org.apache.maven:maven-core:${versions.maven}",
                    'plugin': [
                            'api': "org.apache.maven:maven-plugin-api:${versions.maven}",
                            'annotations': "org.apache.maven.plugin-tools:maven-plugin-annotations:${versions.mavenAnnotations}",
                            'builder': "gradle.plugin.com.liferay:gradle-plugins-maven-plugin-builder:${versions.mavenPluginBuilder}",
                            'publish': "com.vanniktech:gradle-maven-publish-plugin:${versions.mavenPublish}",
                            'tools': "org.apache.maven.plugin-tools:maven-plugin-annotations:3.2",
                    ]
            ],

    ]

    dependencies {
        classpath deps.maven.plugin.builder
        classpath deps.maven.plugin.publish
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

plugins {
    id 'com.github.sherter.google-java-format' version '0.8'
}

// To run: $ gradle :aggregateJavadocs
apply plugin: 'nebula-aggregate-javadocs'

// Maven publishing
//
// Note: Use `gradle publishToMavenLocal` to publish to Maven local.
//
// Set these properties in ~/.gradle/gradle.properties:
//
// signing.gnupg.keyName=[pgp key name]
// signing.keyId=[pgp key name]
// signing.password=[pgp key password]
// signing.secretKeyRingFile=[private key ring file]
//
//sonatypeUsername=[Sonatype user]
//sonatypePassword=[Sonatype password]
subprojects {
    evaluationDependsOnChildren()
    
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group = GROUP
    version = VERSION_NAME

    repositories {
        jcenter()
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }


    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = project.name
                from components.java
                artifact sourcesJar
                artifact javadocJar
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    url = 'http://github.com/presentco/present-rpc'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'present'
                            name = 'Present Company'
                            email = 'hello@present.co'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:presentco/present-rpc.git'
                        developerConnection = 'scm:git:git@github.com:presentco/present-rpc.git'
                        url = 'http://github.com/presentco/present-rpc'
                    }
                }
            }
        }
        repositories {
            maven {
                // Snapshot repo
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    // Using findProperty() avoids breaking the build when these properties are missing.
                    username findProperty('sonatypeUsername')
                    password findProperty('sonatypePassword')
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }

        // Suppress warnings
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    // Run this after the subproject so project.description is set.
    afterEvaluate { Project project ->
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    pom {
                        name = project.description
                    }
                }
            }
        }
    }
}
