//
// Code generated by present.rpc.SwiftGenerator: Do not edit.
// Source file: {{SourceFile}}
//
// For use with the Swift generator plugin for the protocol buffer compiler.
//   https://github.com/apple/swift-protobuf/
//

import Foundation
import SwiftProtobuf

function {{ServiceName}}(url) {
  this.url = url;
}
struct {{ServiceName}} {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

{{ServiceName}}.prototype._post = function(path, arg) {
  var url = this.url + path;
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", url);
    xhr.onerror = function() {
      reject({
        request: xhr,
        code: xhr.status,
        message: xhr.statusText
      });
    }
    xhr.onload = function () {
      if (xhr.status >= 200 && xhr.status < 300) {
        resolve(xhr.response);
      } else {
        xhr.onerror();
      }
    };
    xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
    if (this.headers) {
      Object.keys(this.headers).forEach(function (key) {
        xhr.setRequestHeader(key, this.headers[key]);
      });
    }
    xhr.responseType = "json";
    xhr.send(JSON.stringify(arg));
  });
};


// ==========

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}


// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension EchoMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EchoMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularUInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EchoMessage, rhs: EchoMessage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
