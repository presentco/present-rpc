// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: present/rpc.proto at 16:1
package present.rpc;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import okio.ByteString;

/**
 * Result of an RPC invocation.
 */
public final class Response extends Message<Response, Response.Builder> {
  public static final ProtoAdapter<Response> ADAPTER = new ProtoAdapter_Response();

  private static final long serialVersionUID = 0L;

  public static final ByteString DEFAULT_RESULTBYTES = ByteString.EMPTY;

  /**
   * Present when an error occurs.
   */
  @WireField(
      tag = 1,
      adapter = "present.wire.rpc.core.Error#ADAPTER"
  )
  public final Error error;

  /**
   * Encoded result from RPC method
   * Note: The current client proto generator doesn't like the name 'result' here.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString resultBytes;

  public Response(Error error, ByteString resultBytes) {
    this(error, resultBytes, ByteString.EMPTY);
  }

  public Response(Error error, ByteString resultBytes, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    if (Internal.countNonNull(error, resultBytes) > 1) {
      throw new IllegalArgumentException("at most one of error, resultBytes may be non-null");
    }
    this.error = error;
    this.resultBytes = resultBytes;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.error = error;
    builder.resultBytes = resultBytes;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Response)) return false;
    Response o = (Response) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(error, o.error)
        && Internal.equals(resultBytes, o.resultBytes);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (error != null ? error.hashCode() : 0);
      result = result * 37 + (resultBytes != null ? resultBytes.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (error != null) builder.append(", error=").append(error);
    if (resultBytes != null) builder.append(", resultBytes=").append(resultBytes);
    return builder.replace(0, 2, "Response{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Response, Builder> {
    public Error error;

    public ByteString resultBytes;

    public Builder() {
    }

    /**
     * Present when an error occurs.
     */
    public Builder error(Error error) {
      this.error = error;
      this.resultBytes = null;
      return this;
    }

    /**
     * Encoded result from RPC method
     * Note: The current client proto generator doesn't like the name 'result' here.
     */
    public Builder resultBytes(ByteString resultBytes) {
      this.resultBytes = resultBytes;
      this.error = null;
      return this;
    }

    @Override
    public Response build() {
      return new Response(error, resultBytes, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Response extends ProtoAdapter<Response> {
    ProtoAdapter_Response() {
      super(FieldEncoding.LENGTH_DELIMITED, Response.class);
    }

    @Override
    public int encodedSize(Response value) {
      return (value.error != null ? Error.ADAPTER.encodedSizeWithTag(1, value.error) : 0)
          + (value.resultBytes != null ? ProtoAdapter.BYTES.encodedSizeWithTag(2, value.resultBytes) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Response value) throws IOException {
      if (value.error != null) Error.ADAPTER.encodeWithTag(writer, 1, value.error);
      if (value.resultBytes != null) ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.resultBytes);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Response decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.error(Error.ADAPTER.decode(reader)); break;
          case 2: builder.resultBytes(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Response redact(Response value) {
      Builder builder = value.newBuilder();
      if (builder.error != null) builder.error = Error.ADAPTER.redact(builder.error);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
