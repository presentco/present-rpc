// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: present/rpc.proto at 28:1
package present.rpc;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import okio.ByteString;

/**
 * RPC Error
 */
public final class Error extends Message<Error, Error.Builder> {
  public static final ProtoAdapter<Error> ADAPTER = new ProtoAdapter_Error();

  private static final long serialVersionUID = 0L;

  public static final Type DEFAULT_TYPE = Type.CLIENT;

  public static final String DEFAULT_MESSAGE = "";

  @WireField(
      tag = 1,
      adapter = "present.wire.rpc.core.Error$Type#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final Type type;

  /**
   * Descriptive message or a key to a descriptive message (when localized)
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String message;

  public Error(Type type, String message) {
    this(type, message, ByteString.EMPTY);
  }

  public Error(Type type, String message, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.message = message;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.message = message;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Error)) return false;
    Error o = (Error) other;
    return unknownFields().equals(o.unknownFields())
        && type.equals(o.type)
        && message.equals(o.message);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + type.hashCode();
      result = result * 37 + message.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", type=").append(type);
    builder.append(", message=").append(message);
    return builder.replace(0, 2, "Error{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Error, Builder> {
    public Type type;

    public String message;

    public Builder() {
    }

    public Builder type(Type type) {
      this.type = type;
      return this;
    }

    /**
     * Descriptive message or a key to a descriptive message (when localized)
     */
    public Builder message(String message) {
      this.message = message;
      return this;
    }

    @Override
    public Error build() {
      if (type == null
          || message == null) {
        throw Internal.missingRequiredFields(type, "type",
            message, "message");
      }
      return new Error(type, message, super.buildUnknownFields());
    }
  }

  public enum Type implements WireEnum {
    /**
     * There was a problem with the request itself.
     */
    CLIENT(1),

    /**
     * An error occurred while processing the request.
     */
    SERVER(2);

    public static final ProtoAdapter<Type> ADAPTER = ProtoAdapter.newEnumAdapter(Type.class);

    private final int value;

    Type(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static Type fromValue(int value) {
      switch (value) {
        case 1: return CLIENT;
        case 2: return SERVER;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_Error extends ProtoAdapter<Error> {
    ProtoAdapter_Error() {
      super(FieldEncoding.LENGTH_DELIMITED, Error.class);
    }

    @Override
    public int encodedSize(Error value) {
      return Type.ADAPTER.encodedSizeWithTag(1, value.type)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.message)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Error value) throws IOException {
      Type.ADAPTER.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.message);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Error decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.type(Type.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.message(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Error redact(Error value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
