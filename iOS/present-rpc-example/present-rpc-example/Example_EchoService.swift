//
// Code generated by present.rpc.SwiftGenerator: Do not edit.
// Source file: {{SourceFile}}
//
// For use with protocol buffer classes generated by the Swift protocol buffer generator compiler:
//   https://github.com/apple/swift-protobuf/
// For more information see:
//   https://github.com/presentco/present-rpc

import Foundation
import SwiftProtobuf

enum Example_EchoService_Error {
    case NetworkError(Error)
    case NoData()
    case UnableToParseResponse(String)
}

enum Example_EchoService_Response<T> {
    case Success(T)
    case Failure(Example_EchoService_Error)
}

struct Example_EchoService {
    let serviceUrl: URL
    
    init(serviceUrl: URL) {
        self.serviceUrl = serviceUrl
    }

    func urlRequest(forServiceMethod path: String, withArg arg: SwiftProtobuf.Message) -> URLRequest {
        let url = self.serviceUrl.appendingPathComponent(path)
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("application/x-protobuf", forHTTPHeaderField: "Content-Type")
        request.httpBody = try! arg.serializedData()
        return request
    }
    
    func post<T: SwiftProtobuf.Message>(
        serviceMethod path: String,
        arg: SwiftProtobuf.Message,
        completion: @escaping (Example_EchoService_Response<T>)->Void)
    {
        let request = urlRequest(forServiceMethod: path, withArg: arg)
        let task = URLSession.shared.dataTask(with: request)
        { (data, response, error) in
            if let error = error {
                completion(Example_EchoService_Response.Failure(Example_EchoService_Error.NetworkError(error)))
                return
            }
            guard let content = data else {
                completion(Example_EchoService_Response.Failure(Example_EchoService_Error.NoData()))
                return
            }
            guard let response = try? T(serializedData: content) else {
                let error = Example_EchoService_Error.UnableToParseResponse(String(describing: String(data: content, encoding: .utf8)))
                completion(Example_EchoService_Response.Failure(error))
                return
            }
            completion(Example_EchoService_Response.Success(response))
        }
        
        task.resume() // to start the url session
    }
}

// {{MethodSignature}}
extension Example_EchoService {
    func echo( arg: Example_EchoMessage,
        completion: @escaping (Example_EchoService_Response<Example_EchoMessage>)->Void)
    {
        post(serviceMethod: "echo", arg: arg, completion: completion)
    }
}
